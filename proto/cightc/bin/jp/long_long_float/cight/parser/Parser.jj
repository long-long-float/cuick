options {
	STATIC = false;
	DEBUG_PARSER = true;
	UNICODE_INPUT = true;
}

SPECIAL_TOKEN: { <SPACES: ([" ", "\t", "\n", "\r", "\f"])+> }

MORE: { <"/*"> : IN_BLOCK_COMMENT }
<IN_BLOCK_COMMENT> MORE: { <~[]> }
<IN_BLOCK_COMMENT> SPECIAL_TOKEN: {<BLOCK_COMMENT: "*/" : DEFAULT }

SPECIAL_TOKEN: {
	<LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r\n" | "\r")?>
}

TOKEN: {
    <ASM : "asm">
  | <AUTO : "auto">
  | <BOOL : "bool">
  | <BREAK : "break">
  | <CASE : "case">
  | <CATCH : "catch">
  | <CHAR : "char">
  | <CLASS : "class">
  | <CONST : "const">
  | <CONST_CAST : "const_cast">
  | <CONTINUE : "continue">
  | <DEFAULT : "default">
  | <DELETE : "delete">
  | <DO : "do">
  | <DOUBLE : "double">
  | <DYNAMIC_CAST : "dynamic_cast">
  | <ELSE : "else">
  | <ENUM : "enum">
  | <EXPLICIT : "explicit">
  | <EXPORT : "export">
  | <EXTERN : "extern">
  | <FALSE : "false">
  | <FLOAT : "float">
  | <FOR : "for">
  | <FRIEND : "friend">
  | <GOTO : "goto">
  | <IF : "if">
  | <INLINE : "inline">
  | <INT : "int">
  | <LONG : "long">
  | <MUTABLE : "mutable">
  | <NAMESPACE : "namespace">
  | <NEW : "new">
  | <OPERATOR : "operator">
  | <PRIVATE : "private">
  | <PROTECTED : "protected">
  | <PUBLIC : "public">
  | <REGISTER : "register">
  | <REINTERPRET_CAST : "reinterpret_cast">
  | <RETURN : "return">
  | <SHORT : "short">
  | <SIGNED : "signed">
  | <SIZEOF : "sizeof">
  | <STATIC : "static">
  | <STATIC_CAST : "static_cast">
  | <STRUCT : "struct">
  | <SWITCH : "switch">
  | <TEMPLATE : "template">
  | <THIS : "this">
  | <THROW : "throw">
  | <TRUE : "true">
  | <TRY : "try">
  | <TYPEDEF : "typedef">
  | <TYPEID : "typeid">
  | <TYPENAME : "typename">
  | <UNION : "union">
  | <UNSIGNED : "unsigned">
  | <USING : "using">
  | <VIRTUAL : "virtual">
  | <VOID : "void">
  | <VOLATILE : "volatile">
  | <WCHAR_T : "wchar_t">
  | <WHILE : "while">
}

TOKEN: {
	<IDENTIFIER: ["a"-"z", "A"-"Z", "_"](["a"-"z", "A"-"Z", "_", "0"-"9"])*>
}

TOKEN: {
	<INTEGER: ["1"-"9"](["0"-"9"])* ("U")? ("L")?
		| "0" ["x", "X"](["0"-"9", "a"-"f", "A"-"F"])+ ("U")? ("L")?
		| "0" (["0"-"7"])* ("U")? ("L")?
		| "0" (["b", "B"]) (["0"-"1"])+ ("U")? ("L")?
		>
}

MORE: { <"'"> : IN_CHARACTER }
<IN_CHARACTER> MORE: {
      <~["'", "\\", "\n", "\r"]> : CHARACTER_TERM
    | <"\\" (["0"-"7"]){3}> : CHARACTER_TERM
    | <"\\" ~[]> : CHARACTER_TERM
}
<CHARACTER_TERM> TOKEN: { <CHARACTER: "'"> : DEFAULT }

MORE: { <"\""> : IN_STRING }
<IN_STRING> MORE: {
      <(~["\"", "\\", "\n", "\r"])+>
    | <"\\" (["0"-"7"]){3}>
    | <"\\" ~[]>
}
<IN_STRING> TOKEN: { <STRING: "\""> : DEFAULT }

MORE: { <"`"> : IN_BUILT_IN_CODE }
<IN_BUILT_IN_CODE> MORE: {
      <(~["`"])>
    | <"\\`" >
}
<IN_BUILT_IN_CODE> TOKEN: { <BUILT_IN_CODE: "`"> : DEFAULT }

