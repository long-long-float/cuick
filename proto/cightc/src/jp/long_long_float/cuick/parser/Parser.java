/* Generated By:JavaCC: Do not edit this line. Parser.java */
public class Parser implements ParserConstants {
        private String sourceName;
    private ErrorHandler errorHandler;

    public Parser(Reader s, String name, ErrorHandler errorHandler) {
        this(s);
        this.sourceName = name;
        this.errorHandler = errorHandler;
    }

    static public AST parseFile(File file, ErrorHandler errorHandler) throws SyntaxException, FileException {
        return newFileParser(file, errorHandler).parse();
    }

    static public Parser newFileParser(File file, ErrorHandler errorHandler) throws FileException {
        try {
            FileInputStream fis = new FileInputStream(file);
            BufferedReader r = new BufferedReader(new InputStreamReader(fis, TextUtils.detectEncoding(fis)));
            return new Parser(r, file.getPath(), errorHandler);
        }
        catch(FileNotFoundException ex) {
            throw new FileException(ex.getMessage());
        }
        catch(UnsupportedEncodingException ex) {
            throw new Error("Encode is not supported : " + ex.getMessage());
        }
    }

    public AST parse() throws SyntaxException {
        try {
            return comlilation_unit();
        }
        catch(TokenMgrError ex) {
            throw new SyntaxException(ex.getMessage());
        }
        catch(ParseException ex) {
            throw new SyntaxException(ex.getMessage());
        }
    }

        protected Location location(Token t) {
        return new Location(sourceName, t);
        }

//Êñ?≥?

//„ÇΩ„Éº„ÇπÂÖ®‰Ω?
  final public AST comlilation_unit() throws ParseException {
    trace_call("comlilation_unit");
    try {
    Token t;

    Declarations decls = new Declarations();

    Function func;
    List<Variable> vars;
    TypedefNode typedef;
    AtCommandNode at_command;
    StmtNode stmt;
        t = getToken(1);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
        case CHAR:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case LONG:
        case RETURN:
        case SHORT:
        case SIZEOF:
        case SWITCH:
        case TYPEDEF:
        case UNSIGNED:
        case WHILE:
        case DOLLAR:
        case EXTEND:
        case IDENTIFIER:
        case INTEGER:
        case CHARACTER:
        case STRING:
        case 89:
        case 91:
        case 92:
        case 96:
        case 99:
        case 128:
        case 129:
        case 132:
        case 133:
        case 134:
        case 135:
        case 140:
        case 141:
        case 142:
        case 143:
        case 144:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        if (jj_2_1(2147483647)) {
          func = deffun();
                        decls.funcs.add(func);
        } else if (jj_2_2(2147483647)) {
          func = def_extendfun();
                               decls.funcs.add(func);
        } else if (jj_2_3(2147483647)) {
          vars = defvars();
                                           decls.vars.addAll(vars);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TYPEDEF:
            typedef = typedef();
                            decls.typedefs.add(typedef);
            break;
          case 140:
          case 141:
          case 142:
          case 143:
          case 144:
            at_command = at_command();
                                  decls.atCommands.add(at_command);
            break;
          case BREAK:
          case CONTINUE:
          case DO:
          case FOR:
          case IF:
          case RETURN:
          case SIZEOF:
          case SWITCH:
          case WHILE:
          case IDENTIFIER:
          case INTEGER:
          case CHARACTER:
          case STRING:
          case 89:
          case 91:
          case 92:
          case 96:
          case 99:
          case 128:
          case 129:
          case 132:
          case 133:
          case 134:
          case 135:
            stmt = stmt();
                      decls.stmts.add(stmt);
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(0);
        {if (true) return new AST(location(t), decls);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("comlilation_unit");
    }
  }

//Â§âÊï∞ÂÆ£Ë®?
  final public List<Variable> defvars() throws ParseException {
    trace_call("defvars");
    try {
    List<Variable> defs = new ArrayList<Variable>();
    Type type;
    String name;
    ExprNode init = null;
      //storage(static„Å™„Å©)„ÅØÁÑ°„Å?
          type = type();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 92:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(92);
      }
      name = name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
        jj_consume_token(93);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SIZEOF:
        case IDENTIFIER:
        case INTEGER:
        case CHARACTER:
        case STRING:
        case 89:
        case 91:
        case 92:
        case 128:
        case 129:
        case 132:
        case 133:
        case 134:
        case 135:
          expr();
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        jj_consume_token(94);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        jj_consume_token(95);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 96:
          jj_consume_token(96);
          expr();
          label_3:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 97:
              ;
              break;
            default:
              jj_la1[6] = jj_gen;
              break label_3;
            }
            jj_consume_token(97);
            expr();
          }
          jj_consume_token(98);
          break;
        case SIZEOF:
        case IDENTIFIER:
        case INTEGER:
        case CHARACTER:
        case STRING:
        case 89:
        case 91:
        case 92:
        case 128:
        case 129:
        case 132:
        case 133:
        case 134:
        case 135:
          init = expr();
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
            defs.add(new Variable(new TypeNode(type), name, init));
            init = null;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 97:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        jj_consume_token(97);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 91:
          jj_consume_token(91);
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 92:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_5;
          }
          jj_consume_token(92);
        }
        name = name();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 93:
          jj_consume_token(93);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SIZEOF:
          case IDENTIFIER:
          case INTEGER:
          case CHARACTER:
          case STRING:
          case 89:
          case 91:
          case 92:
          case 128:
          case 129:
          case 132:
          case 133:
          case 134:
          case 135:
            expr();
            break;
          default:
            jj_la1[12] = jj_gen;
            ;
          }
          jj_consume_token(94);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          jj_consume_token(95);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            jj_consume_token(96);
            expr();
            label_6:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 97:
                ;
                break;
              default:
                jj_la1[14] = jj_gen;
                break label_6;
              }
              jj_consume_token(97);
              expr();
            }
            jj_consume_token(98);
            break;
          case SIZEOF:
          case IDENTIFIER:
          case INTEGER:
          case CHARACTER:
          case STRING:
          case 89:
          case 91:
          case 92:
          case 128:
          case 129:
          case 132:
          case 133:
          case 134:
          case 135:
            init = expr();
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
            defs.add(new Variable(new TypeNode(type), name, init));
            init = null;
      }
      jj_consume_token(99);
            {if (true) return defs;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("defvars");
    }
  }

  final public Function deffun() throws ParseException {
    trace_call("deffun");
    try {
    //String modif = null;
    Type ret;
    String n;
    Params ps;
    BlockNode body;
      ret = type_with_suffix();
      n = name();
      jj_consume_token(89);
      ps = params();
      jj_consume_token(100);
      body = block();
            Type type = new FunctionType(ret, ps.parametersType());
            {if (true) return new Function(new TypeNode(type), n, ps, body);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("deffun");
    }
  }

  final public Function def_extendfun() throws ParseException {
    trace_call("def_extendfun");
    try {
    Token t;
    Type ret;
    Type receiver;
    String n;
    Params ps;
    BlockNode body;
      t = jj_consume_token(EXTEND);
      ret = type_with_suffix();
      receiver = type_with_suffix();
      jj_consume_token(90);
      n = name();
      jj_consume_token(89);
      ps = params();
      jj_consume_token(100);
      body = block();
            ps.addParamFront(new Parameter(new TypeNode(receiver), "this"));
            Type type = new FunctionType(ret, ps.parametersType());
            {if (true) return new Function(location(t), new TypeNode(type), n, ps, body);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("def_extendfun");
    }
  }

  final public Params params() throws ParseException {
    trace_call("params");
    try {
    List<Parameter> params = new ArrayList<Parameter>();
    Parameter param, param1;
      param1 = param();
                     params.add(param1);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 97:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_7;
        }
        jj_consume_token(97);
        param = param();
                         params.add(param);
      }
            {if (true) return new Params(param1.location(), params);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("params");
    }
  }

  final public Parameter param() throws ParseException {
    trace_call("param");
    try {
    Type t;
    String n;
      t = type();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 92:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_8;
        }
        jj_consume_token(92);
      }
      n = name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
        jj_consume_token(93);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SIZEOF:
        case IDENTIFIER:
        case INTEGER:
        case CHARACTER:
        case STRING:
        case 89:
        case 91:
        case 92:
        case 128:
        case 129:
        case 132:
        case 133:
        case 134:
        case 135:
          expr();
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        jj_consume_token(94);
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
                                                        {if (true) return new Parameter(new TypeNode(t), n);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("param");
    }
  }

  final public BlockNode block() throws ParseException {
    trace_call("block");
    try {
    Token t;
    List<Variable> vars, varsAll = new ArrayList<Variable>();
    StmtNode stmt;
    List<StmtNode> stmts = new ArrayList<StmtNode>();
      t = jj_consume_token(96);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
        case CHAR:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case LONG:
        case RETURN:
        case SHORT:
        case SIZEOF:
        case SWITCH:
        case UNSIGNED:
        case WHILE:
        case DOLLAR:
        case IDENTIFIER:
        case INTEGER:
        case CHARACTER:
        case STRING:
        case 89:
        case 91:
        case 92:
        case 96:
        case 99:
        case 128:
        case 129:
        case 132:
        case 133:
        case 134:
        case 135:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_9;
        }
        if (jj_2_4(2147483647)) {
          vars = defvars();
                                           varsAll.addAll(vars);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BREAK:
          case CONTINUE:
          case DO:
          case FOR:
          case IF:
          case RETURN:
          case SIZEOF:
          case SWITCH:
          case WHILE:
          case IDENTIFIER:
          case INTEGER:
          case CHARACTER:
          case STRING:
          case 89:
          case 91:
          case 92:
          case 96:
          case 99:
          case 128:
          case 129:
          case 132:
          case 133:
          case 134:
          case 135:
            stmt = stmt();
                      stmts.add(stmt);
            break;
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
            {if (true) return new BlockNode(location(t), varsAll, stmts);}
      jj_consume_token(98);
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("block");
    }
  }

  final public TypedefNode typedef() throws ParseException {
    trace_call("typedef");
    try {
    Token t;
    String realname, newname;
    ExprNode expr = null;
      t = jj_consume_token(TYPEDEF);
      realname = name();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 92:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_10;
        }
        jj_consume_token(92);
                               realname += '*';
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
                                                           realname += '&';
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      newname = name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
        jj_consume_token(93);
        expr = expr();
        jj_consume_token(94);
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      jj_consume_token(99);
            //addType(newname.image);
            {if (true) return new TypedefNode(location(t), realname, newname, expr);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("typedef");
    }
  }

/*
‰Ωï„ÇÇ„Å§„Å?Å¶„Å™„Å?¥??Âû?
int
vector<int, int>
$T
*/
  final public Type type() throws ParseException {
    trace_call("type");
    try {
    Token t;
        String name;

    Type type;
    List<Type> templ_types = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLLAR:
        t = jj_consume_token(DOLLAR);
        name = name();
    {if (true) return new FunctionTemplateType(name, location(t));}
        break;
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case UNSIGNED:
      case IDENTIFIER:
        type = type_base();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 138:
          templ_types = templ_types();
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
    {if (true) return new TemplateType(templ_types, type);}
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("type");
    }
  }

/*
*„Ç?„Åå‰ªò„ÅÑ„ÅüÂûã
int*
int&
$T*
*/
  final public Type type_with_suffix() throws ParseException {
    trace_call("type_with_suffix");
    try {
  Type type;
      type = type();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 92:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_11;
        }
        jj_consume_token(92);
                     type = new PointerType(type);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
           type = new ReferenceType(type);
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
    {if (true) return type;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("type_with_suffix");
    }
  }

  final public Type type_base() throws ParseException {
    trace_call("type_base");
    try {
    Token t, t1, t2;
    List<String> types = new ArrayList<String>();
    String typename;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case UNSIGNED:
        /*      t=<VOID>          { return new VoidType(location(t)); }
            | t=<CHAR>          { return IntegerType.charType(location(t)); }
            | t=<SHORT>         { return IntegerType.shortType(location(t)); }
            | t=<INT>           { return IntegerType.intType(location(t)); }
            | t=<LONG>          { return IntegerType.longType(location(t)); }
            | LOOKAHEAD(2) t=<UNSIGNED> <CHAR>
                { return IntegerType.ucharType(location(t)); }
            | LOOKAHEAD(2) t=<UNSIGNED> <SHORT>
                { return IntegerType.ushortType(location(t)); }
            | LOOKAHEAD(2) t=<UNSIGNED> <INT>
                { return IntegerType.uintType(location(t)); }
            | t=<UNSIGNED> <LONG>
                { return IntegerType.ulongType(location(t)); }
            | t=<STRUCT> name=<IDENTIFIER>
                { return new StructType(location(t), name.image); }
            | t=<UNION> name=<IDENTIFIER>
                { return new UnionType(location(t), name.image); }
            |  LOOKAHEAD({isType(getToken(1).image)}) name=<IDENTIFIER>
                { return new UserType(location(nameType.image)); }*/
            t1 = basic_type();
                      types.add(t1.image);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case SHORT:
          case UNSIGNED:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_12;
          }
          t2 = basic_type();
                                                                 types.add(t2.image);
        }
          {if (true) return new BasicType(types, location(t1));}
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
          {if (true) return new NamedType(t.image, location(t));}
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("type_base");
    }
  }

  final public Token basic_type() throws ParseException {
    trace_call("basic_type");
    try {
  Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR:
        t = jj_consume_token(CHAR);
        break;
      case SHORT:
        t = jj_consume_token(SHORT);
        break;
      case INT:
        t = jj_consume_token(INT);
        break;
      case LONG:
        t = jj_consume_token(LONG);
        break;
      case UNSIGNED:
        t = jj_consume_token(UNSIGNED);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case DOUBLE:
        t = jj_consume_token(DOUBLE);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("basic_type");
    }
  }

  final public StmtNode stmt() throws ParseException {
    trace_call("stmt");
    try {
    StmtNode n = null;
    ExprNode e = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 99:
        jj_consume_token(99);
        break;
      case SIZEOF:
      case IDENTIFIER:
      case INTEGER:
      case CHARACTER:
      case STRING:
      case 89:
      case 91:
      case 92:
      case 128:
      case 129:
      case 132:
      case 133:
      case 134:
      case 135:
        e = expr();
        jj_consume_token(99);
                       n = new ExprStmtNode(e.location(), e);
        break;
      case 96:
        n = block();
        break;
      case IF:
        n = if_stmt();
        break;
      case WHILE:
        n = while_stmt();
        break;
      case DO:
        n = dowhile_stmt();
        break;
      default:
        jj_la1[34] = jj_gen;
        if (jj_2_5(2147483647)) {
          n = for_stmt();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FOR:
            n = foreach_stmt();
            break;
          case SWITCH:
            n = switch_stmt();
            break;
          case BREAK:
            n = break_stmt();
            break;
          case CONTINUE:
            n = continue_stmt();
            break;
          case RETURN:
            n = return_stmt();
            break;
          default:
            jj_la1[35] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
            {if (true) return n;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("stmt");
    }
  }

  final public IfNode if_stmt() throws ParseException {
    trace_call("if_stmt");
    try {
    Token t;
    ExprNode cond;
    StmtNode thenBody, elseBody = null;
      t = jj_consume_token(IF);
      jj_consume_token(89);
      cond = expr();
      jj_consume_token(100);
      thenBody = stmt();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        elseBody = stmt();
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
            {if (true) return new IfNode(location(t), cond, thenBody, elseBody);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("if_stmt");
    }
  }

  final public WhileNode while_stmt() throws ParseException {
    trace_call("while_stmt");
    try {
    Token t;
    ExprNode cond;
    StmtNode body;
      t = jj_consume_token(WHILE);
      jj_consume_token(89);
      cond = expr();
      jj_consume_token(100);
      body = stmt();
            {if (true) return new WhileNode(location(t), cond, body);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("while_stmt");
    }
  }

  final public DoWhileNode dowhile_stmt() throws ParseException {
    trace_call("dowhile_stmt");
    try {
    Token t;
    ExprNode cond;
    StmtNode body;
      t = jj_consume_token(DO);
      body = stmt();
      jj_consume_token(WHILE);
      jj_consume_token(89);
      cond = expr();
      jj_consume_token(100);
      jj_consume_token(99);
            {if (true) return new DoWhileNode(location(t), body, cond);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("dowhile_stmt");
    }
  }

  final public ForNode for_stmt() throws ParseException {
    trace_call("for_stmt");
    try {
    Token t;
    ExprNode init = null, cond = null, incr = null;
    StmtNode body;
      t = jj_consume_token(FOR);
      jj_consume_token(89);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIZEOF:
      case IDENTIFIER:
      case INTEGER:
      case CHARACTER:
      case STRING:
      case 89:
      case 91:
      case 92:
      case 128:
      case 129:
      case 132:
      case 133:
      case 134:
      case 135:
        init = expr();
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      jj_consume_token(99);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIZEOF:
      case IDENTIFIER:
      case INTEGER:
      case CHARACTER:
      case STRING:
      case 89:
      case 91:
      case 92:
      case 128:
      case 129:
      case 132:
      case 133:
      case 134:
      case 135:
        cond = expr();
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      jj_consume_token(99);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIZEOF:
      case IDENTIFIER:
      case INTEGER:
      case CHARACTER:
      case STRING:
      case 89:
      case 91:
      case 92:
      case 128:
      case 129:
      case 132:
      case 133:
      case 134:
      case 135:
        incr = expr();
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      jj_consume_token(100);
      body = stmt();
            {if (true) return new ForNode(location(t), init, cond, incr, body);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("for_stmt");
    }
  }

  final public ForEachNode foreach_stmt() throws ParseException {
    trace_call("foreach_stmt");
    try {
    Token t;

    Type var_type;
    String var_name;
    //List<Pair<Type, String>> vars = new ArrayList<Pair<Type, String>>();
    Pair<Type, String> var;

    boolean fore = true;

    Enumerable enume;
    //List<Enumerable> enumes = new ArrayList<Enumerable>();

    StmtNode body, lastBody = null;
      t = jj_consume_token(FOR);
      jj_consume_token(89);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case UNSIGNED:
      case DOLLAR:
      case IDENTIFIER:
        var_type = type();
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      var_name = name();
                                            var = new Pair<Type, String>(var_type, var_name);
      jj_consume_token(101);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 102:
      case 103:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 102:
          jj_consume_token(102);
          break;
        case 103:
          jj_consume_token(103);
                         fore = true;
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      enume = enumerable();
      jj_consume_token(100);
      body = stmt();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LAST:
        jj_consume_token(LAST);
        lastBody = stmt();
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
            {if (true) return new ForEachNode(location(t), var, fore, enume, body, lastBody);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("foreach_stmt");
    }
  }

  final public Enumerable enumerable() throws ParseException {
    trace_call("enumerable");
    try {
    ExprNode expr;
    RangeNode range;

    List<ExprNode> exprs = new ArrayList<ExprNode>();
      if (jj_2_6(2147483647)) {
        range = range();
            {if (true) return new RangeEnumerable(range);}
      } else if (jj_2_7(2147483647)) {
        expr = expr();
        jj_consume_token(101);
        range = range();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SIZEOF:
        case IDENTIFIER:
        case INTEGER:
        case CHARACTER:
        case STRING:
        case 89:
        case 91:
        case 92:
        case 128:
        case 129:
        case 132:
        case 133:
        case 134:
        case 135:
          expr = expr();
                     exprs.add(expr);
          label_13:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 97:
              ;
              break;
            default:
              jj_la1[44] = jj_gen;
              break label_13;
            }
            jj_consume_token(97);
            expr = expr();
                                                           exprs.add(expr);
          }
            {if (true) return new VariableSetEnumerable(exprs);}
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("enumerable");
    }
  }

  final public SwitchNode switch_stmt() throws ParseException {
    trace_call("switch_stmt");
    try {
    Token t;
    ExprNode cond;
    List<CaseNode> bodies;
      t = jj_consume_token(SWITCH);
      jj_consume_token(89);
      cond = expr();
      jj_consume_token(100);
      jj_consume_token(96);
      bodies = case_clauses();
      jj_consume_token(98);
            {if (true) return new SwitchNode(location(t), cond, bodies);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("switch_stmt");
    }
  }

  final public List<CaseNode> case_clauses() throws ParseException {
    trace_call("case_clauses");
    try {
    List<CaseNode> clauses = new ArrayList<CaseNode>();
    CaseNode n;
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_14;
        }
        n = case_clause();
                       clauses.add(n);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFAULT_:
        n = default_clause();
                                  clauses.add(n);
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
            {if (true) return clauses;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("case_clauses");
    }
  }

  final public CaseNode case_clause() throws ParseException {
    trace_call("case_clause");
    try {
    List<ExprNode> values;
    BlockNode body;
      values = cases();
      body = case_body();
            {if (true) return new CaseNode(body.location(), values, body);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("case_clause");
    }
  }

  final public List<ExprNode> cases() throws ParseException {
    trace_call("cases");
    try {
    List<ExprNode> values = new ArrayList<ExprNode>();
    ExprNode n;
      label_15:
      while (true) {
        jj_consume_token(CASE);
        n = primary();
        jj_consume_token(101);
                              values.add(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_15;
        }
      }
            {if (true) return values;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("cases");
    }
  }

  final public CaseNode default_clause() throws ParseException {
    trace_call("default_clause");
    try {
  BlockNode body;
      jj_consume_token(DEFAULT_);
      jj_consume_token(101);
      body = case_body();
            {if (true) return new CaseNode(body.location(), new ArrayList<ExprNode>(), body);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("default_clause");
    }
  }

  final public BlockNode case_body() throws ParseException {
    trace_call("case_body");
    try {
    LinkedList<StmtNode> stmts = new LinkedList<StmtNode>();
    StmtNode s;
      label_16:
      while (true) {
        s = stmt();
                if (s != null) stmts.add(s);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
        case CONTINUE:
        case DO:
        case FOR:
        case IF:
        case RETURN:
        case SIZEOF:
        case SWITCH:
        case WHILE:
        case IDENTIFIER:
        case INTEGER:
        case CHARACTER:
        case STRING:
        case 89:
        case 91:
        case 92:
        case 96:
        case 99:
        case 128:
        case 129:
        case 132:
        case 133:
        case 134:
        case 135:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_16;
        }
      }
            /*
            fall through
            // last stmt of case clause must be break stmt.
            if (! (stmts.getLast() instanceof BreakNode)) {
                throw new ParseException(
                  "missing break statement at the last of case clause");
            }
                */
            {if (true) return new BlockNode(stmts.get(0).location(),
                                 new ArrayList<Variable>(),
                                 stmts);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("case_body");
    }
  }

  final public BreakNode break_stmt() throws ParseException {
    trace_call("break_stmt");
    try {
  Token t;
      t = jj_consume_token(BREAK);
      jj_consume_token(99);
                    {if (true) return new BreakNode(location(t));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("break_stmt");
    }
  }

  final public ContinueNode continue_stmt() throws ParseException {
    trace_call("continue_stmt");
    try {
  Token t;
      t = jj_consume_token(CONTINUE);
      jj_consume_token(99);
                       {if (true) return new ContinueNode(location(t));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("continue_stmt");
    }
  }

  final public ReturnNode return_stmt() throws ParseException {
    trace_call("return_stmt");
    try {
    Token t;
    ExprNode expr;
      if (jj_2_8(2)) {
        t = jj_consume_token(RETURN);
        jj_consume_token(99);
                                    {if (true) return new ReturnNode(location(t), null);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
          t = jj_consume_token(RETURN);
          expr = expr();
          jj_consume_token(99);
                                    {if (true) return new ReturnNode(location(t), expr);}
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("return_stmt");
    }
  }

  final public MultiplexAssignNode multiplex_assign() throws ParseException {
    trace_call("multiplex_assign");
    try {
    ExprNode expr;
    List<ExprNode> lhses = new ArrayList<ExprNode>();
    List<ExprNode> rhses = new ArrayList<ExprNode>();
      expr = term();
                 lhses.add(expr);
      label_17:
      while (true) {
        jj_consume_token(97);
        expr = term();
                          lhses.add(expr);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 97:
          ;
          break;
        default:
          jj_la1[51] = jj_gen;
          break label_17;
        }
      }
      jj_consume_token(95);
      expr = term();
                         rhses.add(expr);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 97:
          ;
          break;
        default:
          jj_la1[52] = jj_gen;
          break label_18;
        }
        jj_consume_token(97);
        expr = term();
                          rhses.add(expr);
      }
      jj_consume_token(99);
            {if (true) return new MultiplexAssignNode(lhses, rhses);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("multiplex_assign");
    }
  }

  final public ExprNode expr() throws ParseException {
    trace_call("expr");
    try {
    ExprNode lhs, rhs, expr;
    String op;
    ExprNode n;
      if (jj_2_9(2147483647)) {
        lhs = term();
        jj_consume_token(95);
        rhs = expr();
            {if (true) return new AssignNode(lhs, rhs);}
      } else if (jj_2_10(2147483647)) {
        n = multiplex_assign();
            {if (true) return n;}
      } else if (jj_2_11(2147483647)) {
        lhs = term();
        op = opassign_op();
        rhs = expr();
            {if (true) return new OpAssignNode(lhs, op, rhs);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SIZEOF:
        case IDENTIFIER:
        case INTEGER:
        case CHARACTER:
        case STRING:
        case 89:
        case 91:
        case 92:
        case 128:
        case 129:
        case 132:
        case 133:
        case 134:
        case 135:
          expr = expr10();
            {if (true) return expr;}
          break;
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr");
    }
  }

  final public String opassign_op() throws ParseException {
    trace_call("opassign_op");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
              {if (true) return "+";}
        break;
      case 107:
        jj_consume_token(107);
              {if (true) return "-";}
        break;
      case 108:
        jj_consume_token(108);
              {if (true) return "*";}
        break;
      case 109:
        jj_consume_token(109);
              {if (true) return "/";}
        break;
      case 110:
        jj_consume_token(110);
              {if (true) return "%";}
        break;
      case 111:
        jj_consume_token(111);
              {if (true) return "&";}
        break;
      case 112:
        jj_consume_token(112);
              {if (true) return "|";}
        break;
      case 113:
        jj_consume_token(113);
              {if (true) return "^";}
        break;
      case 114:
        jj_consume_token(114);
              {if (true) return "<<";}
        break;
      case 115:
        jj_consume_token(115);
              {if (true) return ">>";}
        break;
      case 116:
        jj_consume_token(116);
              {if (true) return "**";}
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("opassign_op");
    }
  }

  final public ExprNode expr10() throws ParseException {
    trace_call("expr10");
    try {
  ExprNode c, t, e;
      c = expr9();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 117:
        jj_consume_token(117);
        t = expr();
        jj_consume_token(101);
        e = expr10();
                      {if (true) return new CondExprNode(c, t, e);}
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
            {if (true) return c;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr10");
    }
  }

  final public ExprNode expr9() throws ParseException {
    trace_call("expr9");
    try {
  ExprNode l, r;
      l = expr8();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 118:
          ;
          break;
        default:
          jj_la1[56] = jj_gen;
          break label_19;
        }
        jj_consume_token(118);
        r = expr8();
                                l = new BinaryOpNode(l, "||", r);
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr9");
    }
  }

  final public ExprNode expr8() throws ParseException {
    trace_call("expr8");
    try {
  ExprNode l, r;
      l = expr7();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 119:
          ;
          break;
        default:
          jj_la1[57] = jj_gen;
          break label_20;
        }
        jj_consume_token(119);
        r = expr7();
                                l = new BinaryOpNode(l, "&&", r);
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr8");
    }
  }

  final public ExprNode expr7() throws ParseException {
    trace_call("expr7");
    try {
  ExprNode l, r;
      l = expr6();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 102:
        case 103:
        case 120:
        case 121:
        case 122:
        case 123:
          ;
          break;
        default:
          jj_la1[58] = jj_gen;
          break label_21;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 102:
          jj_consume_token(102);
          r = expr6();
                                 l = new BinaryOpNode(l, ">", r);
          break;
        case 103:
          jj_consume_token(103);
          r = expr6();
                                 l = new BinaryOpNode(l, "<", r);
          break;
        case 120:
          jj_consume_token(120);
          r = expr6();
                                 l = new BinaryOpNode(l, ">=", r);
          break;
        case 121:
          jj_consume_token(121);
          r = expr6();
                                 l = new BinaryOpNode(l, "<=", r);
          break;
        case 122:
          jj_consume_token(122);
          r = expr6();
                                 l = new BinaryOpNode(l, "==", r);
          break;
        case 123:
          jj_consume_token(123);
          r = expr6();
                                 l = new BinaryOpNode(l, "!=", r);
          break;
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr7");
    }
  }

  final public ExprNode expr6() throws ParseException {
    trace_call("expr6");
    try {
  ExprNode l, r;
      l = expr5();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 124:
          ;
          break;
        default:
          jj_la1[60] = jj_gen;
          break label_22;
        }
        jj_consume_token(124);
        r = expr5();
                               l = new BinaryOpNode(l, "|", r);
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr6");
    }
  }

  final public ExprNode expr5() throws ParseException {
    trace_call("expr5");
    try {
  ExprNode l, r;
      l = expr4();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 125:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_23;
        }
        jj_consume_token(125);
        r = expr4();
                               l = new BinaryOpNode(l, "^", r);
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr5");
    }
  }

  final public ExprNode expr4() throws ParseException {
    trace_call("expr4");
    try {
  ExprNode l, r;
      l = expr3();
      jj_consume_token(91);
      r = expr3();
                               l = new BinaryOpNode(l, "&", r);
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr4");
    }
  }

  final public ExprNode expr3() throws ParseException {
    trace_call("expr3");
    try {
  ExprNode l, r;
      l = expr2();
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 126:
        case 127:
          ;
          break;
        default:
          jj_la1[62] = jj_gen;
          break label_24;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 126:
          jj_consume_token(126);
          r = expr2();
                                 l = new BinaryOpNode(l, ">>", r);
          break;
        case 127:
          jj_consume_token(127);
          r = expr2();
                                 l = new BinaryOpNode(l, "<<", r);
          break;
        default:
          jj_la1[63] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr3");
    }
  }

  final public ExprNode expr2() throws ParseException {
    trace_call("expr2");
    try {
  ExprNode l, r;
      l = expr1();
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 128:
        case 129:
          ;
          break;
        default:
          jj_la1[64] = jj_gen;
          break label_25;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 128:
          jj_consume_token(128);
          r = expr1();
                                l = new BinaryOpNode(l, "+", r);
          break;
        case 129:
          jj_consume_token(129);
          r = expr1();
                                l = new BinaryOpNode(l, "-", r);
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr2");
    }
  }

  final public ExprNode expr1() throws ParseException {
    trace_call("expr1");
    try {
  ExprNode l, r;
      l = term();
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 92:
        case 130:
        case 131:
          ;
          break;
        default:
          jj_la1[66] = jj_gen;
          break label_26;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 92:
          jj_consume_token(92);
          r = term();
                              l = new BinaryOpNode(l, "*", r);
          break;
        case 130:
          jj_consume_token(130);
          r = term();
                              l = new BinaryOpNode(l, "/", r);
          break;
        case 131:
          jj_consume_token(131);
          r = term();
                              l = new BinaryOpNode(l, "%", r);
          break;
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr1");
    }
  }

  final public ExprNode term() throws ParseException {
    trace_call("term");
    try {
    Type t;
    ExprNode n;
      if (jj_2_12(2147483647)) {
        jj_consume_token(89);
        t = type();
        label_27:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 92:
            ;
            break;
          default:
            jj_la1[68] = jj_gen;
            break label_27;
          }
          jj_consume_token(92);
        }
        jj_consume_token(100);
        n = term();
                                             {if (true) return new CastNode(t, n);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SIZEOF:
        case IDENTIFIER:
        case INTEGER:
        case CHARACTER:
        case STRING:
        case 89:
        case 91:
        case 92:
        case 128:
        case 129:
        case 132:
        case 133:
        case 134:
        case 135:
          n = unary();
                                      {if (true) return n;}
          break;
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("term");
    }
  }

  final public ExprNode unary() throws ParseException {
    trace_call("unary");
    try {
    ExprNode n;
    Type t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 132:
        jj_consume_token(132);
        n = unary();
                          {if (true) return new PrefixOpNode("++", n);}
        break;
      case 133:
        jj_consume_token(133);
        n = unary();
                          {if (true) return new PrefixOpNode("--", n);}
        break;
      case 128:
        jj_consume_token(128);
        n = term();
                          {if (true) return new UnaryOpNode("+", n);}
        break;
      case 129:
        jj_consume_token(129);
        n = term();
                          {if (true) return new UnaryOpNode("-", n);}
        break;
      case 134:
        jj_consume_token(134);
        n = term();
                          {if (true) return new UnaryOpNode("!", n);}
        break;
      case 135:
        jj_consume_token(135);
        n = term();
                          {if (true) return new UnaryOpNode("~", n);}
        break;
      case 92:
        jj_consume_token(92);
        n = term();
                          {if (true) return new UnaryOpNode("*", n);}
        break;
      case 91:
        jj_consume_token(91);
        n = term();
                          {if (true) return new UnaryOpNode("&", n);}
        break;
      default:
        jj_la1[70] = jj_gen;
        if (jj_2_13(3)) {
          jj_consume_token(SIZEOF);
          jj_consume_token(89);
          t = type();
          jj_consume_token(100);
            {if (true) return new SizeofTypeNode(new TypeNode(t)/*, size_t()*/);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SIZEOF:
            jj_consume_token(SIZEOF);
            n = unary();
            {if (true) return new SizeofExprNode(n/*, size_t()*/);}
            break;
          case IDENTIFIER:
          case INTEGER:
          case CHARACTER:
          case STRING:
          case 89:
            n = postfix();
                          {if (true) return n;}
            break;
          default:
            jj_la1[71] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("unary");
    }
  }

  final public ExprNode postfix() throws ParseException {
    trace_call("postfix");
    try {
    ExprNode expr, idx;
    String memb;
    //List<TypeNode> types = null;
    List<ExprNode> args;
    List<Type> templ_types = null;
      expr = primary();
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 89:
        case 90:
        case 93:
        case 132:
        case 133:
        case 136:
        case 137:
        case 138:
          ;
          break;
        default:
          jj_la1[72] = jj_gen;
          break label_28;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 132:
          jj_consume_token(132);
                              expr = new SuffixOpNode("++", expr);
          break;
        case 133:
          jj_consume_token(133);
                              expr = new SuffixOpNode("--", expr);
          break;
        case 93:
          jj_consume_token(93);
          idx = expr();
          jj_consume_token(94);
                              expr = new ArefNode(expr, idx);
          break;
        case 90:
          jj_consume_token(90);
          memb = name();
                              expr = new MemberNode(expr, memb);
          break;
        case 136:
          jj_consume_token(136);
          memb = name();
                              expr = new StaticMemberNode(expr, memb);
          break;
        case 137:
          jj_consume_token(137);
          memb = name();
                              expr = new PtrMemberNode(expr, memb);
          break;
        case 89:
        case 138:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 138:
            templ_types = templ_types();
            break;
          default:
            jj_la1[73] = jj_gen;
            ;
          }
          jj_consume_token(89);
          args = args();
          jj_consume_token(100);
                                                        expr = new FuncallNode(expr, templ_types, args);
          break;
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
            {if (true) return expr;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("postfix");
    }
  }

  final public List<Type> templ_types() throws ParseException {
    trace_call("templ_types");
    try {
    List<Type> types = new ArrayList<Type>();
    Type type;
      jj_consume_token(138);
      type = type_with_suffix();
                                   types.add(type);
      label_29:
      while (true) {
        jj_consume_token(97);
        type = type_with_suffix();
                                      types.add(type);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 97:
          ;
          break;
        default:
          jj_la1[75] = jj_gen;
          break label_29;
        }
      }
      jj_consume_token(139);
            {if (true) return types;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("templ_types");
    }
  }

  final public String name() throws ParseException {
    trace_call("name");
    try {
    Token t;
      t = jj_consume_token(IDENTIFIER);
                     {if (true) return t.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("name");
    }
  }

  final public List<ExprNode> args() throws ParseException {
    trace_call("args");
    try {
    List<ExprNode> args = new ArrayList<ExprNode>();
    ExprNode arg;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIZEOF:
      case IDENTIFIER:
      case INTEGER:
      case CHARACTER:
      case STRING:
      case 89:
      case 91:
      case 92:
      case 128:
      case 129:
      case 132:
      case 133:
      case 134:
      case 135:
        arg = expr();
                   args.add(arg);
        label_30:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 97:
            ;
            break;
          default:
            jj_la1[76] = jj_gen;
            break label_30;
          }
          jj_consume_token(97);
          arg = expr();
                          args.add(arg);
        }
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
                {if (true) return args;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("args");
    }
  }

  final public List<ExprNode> args_at_least_one() throws ParseException {
    trace_call("args_at_least_one");
    try {
    List<ExprNode> args = new ArrayList<ExprNode>();
    ExprNode arg;
      arg = expr();
                 args.add(arg);
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 97:
          ;
          break;
        default:
          jj_la1[78] = jj_gen;
          break label_31;
        }
        jj_consume_token(97);
        arg = expr();
                          args.add(arg);
      }
                {if (true) return args;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("args_at_least_one");
    }
  }

  final public ExprNode primary() throws ParseException {
    trace_call("primary");
    try {
    Token t;
    ExprNode n;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
            //return integerNode(location(t), t.image);
            {if (true) return new LiteralNode(location(t), new BasicType("int", location(t)), t.image);} //TODO int‰ª•Â§ñ„?„ÇÇ‰Ωú„Çã

        break;
      case CHARACTER:
        t = jj_consume_token(CHARACTER);
            //return new IntegerLiteralNode(location(t), IntegerType.charRef(), characterCode(t.image));
            {if (true) return new LiteralNode(location(t), new BasicType("char", location(t)), t.image);}
        break;
      case STRING:
        t = jj_consume_token(STRING);
            //return new StringLiteralNode(location(t), new PointerType(IntegerType.charRef()), stringValue(t.image));
            {if (true) return new LiteralNode(location(t), new PointerType(new BasicType("char", location(t))), t.image);}
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
            {if (true) return new VariableNode(location(t), t.image);}
        break;
      case 89:
        jj_consume_token(89);
        n = expr();
        jj_consume_token(100);
            {if (true) return n;}
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("primary");
    }
  }

  final public RangeNode range() throws ParseException {
    trace_call("range");
    try {
    ExprNode lexpr, rexpr;
    String r;
      lexpr = expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 104:
        jj_consume_token(104);
                          r = "..";
        break;
      case 105:
        jj_consume_token(105);
                                                r = "...";
        break;
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rexpr = expr();
            {if (true) return new RangeNode(lexpr, r, rexpr);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("range");
    }
  }

//@ÂëΩ‰ª§
//TODO
  final public AtCommandNode at_command() throws ParseException {
    trace_call("at_command");
    try {
    AtCommandNode atCommand;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 140:
        atCommand = at_input();
        break;
      case 141:
        atCommand = at_debug();
        break;
      case 142:
        atCommand = at_memo();
        break;
      case 143:
        atCommand = at_while();
        break;
      case 144:
        atCommand = at_test();
        {if (true) return atCommand;}
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("at_command");
    }
  }

  final public AtInputNode at_input() throws ParseException {
    trace_call("at_input");
    try {
    Token t, name;
    List<AtInputAbstractVariableNode> vars = new ArrayList<AtInputAbstractVariableNode>();
    RangeNode range;
    ExprNode expr;
      t = jj_consume_token(140);
      jj_consume_token(96);
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[82] = jj_gen;
          break label_32;
        }
        if (jj_2_15(2147483647)) {
          name = jj_consume_token(IDENTIFIER);
          jj_consume_token(93);
          if (jj_2_14(2147483647)) {
            range = range();
                                                                      vars.add(new AtInputArrayVariableNode(location(name), name.image, range));
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SIZEOF:
            case IDENTIFIER:
            case INTEGER:
            case CHARACTER:
            case STRING:
            case 89:
            case 91:
            case 92:
            case 128:
            case 129:
            case 132:
            case 133:
            case 134:
            case 135:
              expr = expr();
                                        vars.add(new AtInputArrayVariableNode(location(name), name.image, expr));
              break;
            default:
              jj_la1[83] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          jj_consume_token(94);
        } else if (jj_2_16(2147483647)) {
          name = jj_consume_token(IDENTIFIER);
          jj_consume_token(134);
                                        vars.add(new AtInputVariableNode(location(name), name.image, true));
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            name = jj_consume_token(IDENTIFIER);
                                vars.add(new AtInputVariableNode(location(name), name.image, false));
            break;
          default:
            jj_la1[84] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(98);
        {if (true) return new AtInputNode(location(t), vars);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("at_input");
    }
  }

  final public AtDebugNode at_debug() throws ParseException {
    trace_call("at_debug");
    try {
    Token t;
      t = jj_consume_token(141);
        {if (true) return new AtDebugNode(location(t));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("at_debug");
    }
  }

  final public AtMemoNode at_memo() throws ParseException {
    trace_call("at_memo");
    try {
    Token t;
    ExprNode hash, max = null;
    Function func;
      t = jj_consume_token(142);
      jj_consume_token(89);
      hash = expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 97:
        jj_consume_token(97);
        max = expr();
        break;
      default:
        jj_la1[85] = jj_gen;
        ;
      }
      jj_consume_token(100);
      func = deffun();
        {if (true) return new AtMemoNode(location(t), hash, max, func);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("at_memo");
    }
  }

  final public AtWhileNode at_while() throws ParseException {
    trace_call("at_while");
    try {
    Token t;
    ExprNode cond;
      t = jj_consume_token(143);
      jj_consume_token(89);
      cond = expr();
      jj_consume_token(100);
        {if (true) return new AtWhileNode(location(t), cond);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("at_while");
    }
  }

  final public AtTestNode at_test() throws ParseException {
    trace_call("at_test");
    try {
    Token t, t2, line;
    List<Token> lines = new ArrayList<Token>();
    List<AtTestCase> inCases = new ArrayList<AtTestCase>();
    List<AtTestCase> outCases = new ArrayList<AtTestCase>();
      t = jj_consume_token(144);
      jj_consume_token(96);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 145:
        t2 = jj_consume_token(145);
        label_33:
        while (true) {
          line = jj_consume_token(ONE_LINE);
                                             lines.add(line);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ONE_LINE:
            ;
            break;
          default:
            jj_la1[86] = jj_gen;
            break label_33;
          }
        }
                   inCases.add(new AtTestCase(location(t2), lines));
                   lines = new ArrayList<Token>();
        break;
      case 146:
        t2 = jj_consume_token(146);
        label_34:
        while (true) {
          line = jj_consume_token(ONE_LINE);
                                                 lines.add(line);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ONE_LINE:
            ;
            break;
          default:
            jj_la1[87] = jj_gen;
            break label_34;
          }
        }
               outCases.add(new AtTestCase(location(t2), lines));
               lines = new ArrayList<Token>();
        break;
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(98);
        {if (true) return new AtTestNode(location(t), inCases, outCases);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("at_test");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_3R_110() {
    if (jj_3R_120()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_121()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_40()) return true;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(92)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(123)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(122)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(121)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(120)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_110()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_111()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(103)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(102)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(91)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(101)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(119)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_96()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) return true;
    }
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_64()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(117)) return true;
    if (jj_3R_40()) return true;
    if (jj_scan_token(101)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_89()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_74()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_124()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(116)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(115)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(114)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(113)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(112)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(111)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(110)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(109)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(108)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(107)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(106)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_41()) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(97)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(138)) return true;
    if (jj_3R_36()) return true;
    Token xsp;
    if (jj_3R_88()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_88()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(139)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(95)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_41()) return true;
    if (jj_3R_42()) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    if (jj_3R_119()) return true;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(95)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(137)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(136)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(90)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(93)) return true;
    if (jj_3R_40()) return true;
    if (jj_scan_token(94)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(133)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(132)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_94()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_41()) return true;
    Token xsp;
    if (jj_3R_72()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(95)) return true;
    if (jj_3R_41()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_73()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(99)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(SIZEOF)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_scan_token(99)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(SIZEOF)) return true;
    if (jj_scan_token(89)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(91)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(92)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(135)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(134)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(129)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(128)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(133)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(132)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(134)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_40()) return true;
    if (jj_scan_token(99)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(93)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(92)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(100)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(131)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(130)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(92)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(129)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(128)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_131()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(127)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(126)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_127()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_128()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(90)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(89)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_87()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_125()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_126()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(125)) return true;
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_123()) return true;
    if (jj_scan_token(91)) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(124)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[89];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x30191200,0x20090200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30191200,0x20090200,0x0,0x0,0x0,0x0,0x10101000,0x0,0x0,0x10101000,0x10101000,0x10101000,0x80000,0x20010200,0x400000,0x0,0x0,0x0,0x10101000,0x0,0x0,0x0,0x0,0x0,0x400,0x20000,0x400,0x20090200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8822c015,0x8224001,0x0,0x0,0x20000,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x20000,0x0,0x8022c015,0x224001,0x0,0x0,0x0,0x0,0x80008014,0x0,0x0,0x80008014,0x80008014,0x80008014,0x20001,0x204000,0x0,0x20000,0x20000,0x20000,0x80008014,0x0,0x0,0x8,0x0,0x20000,0x0,0x0,0x0,0x224001,0x4000,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x1a0843e0,0x1a084320,0x8000000,0x10000000,0x1a084300,0x20000000,0x0,0x1a084300,0x80000000,0x0,0x8000000,0x10000000,0x1a084300,0x20000000,0x0,0x1a084300,0x80000000,0x0,0x8000000,0x10000000,0x1a084300,0x20000000,0x1a084360,0x1a084320,0x10000000,0x8000000,0x20000000,0x0,0x140,0x10000000,0x8000000,0x0,0x100,0x0,0x1a084320,0x0,0x0,0x1a084300,0x1a084300,0x1a084300,0x140,0x0,0x0,0x0,0x0,0x1a084300,0x0,0x0,0x0,0x1a084320,0x0,0x0,0x0,0x1a084300,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x10000000,0x1a084300,0x18000000,0x2084300,0x26000000,0x0,0x26000000,0x0,0x0,0x1a084300,0x0,0x2084300,0x0,0x0,0x100,0x1a084300,0x100,0x0,0x1000000,0x1000000,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x9,0x9,0x0,0x0,0x0,0x0,0x2,0x1,0x0,0x2,0x0,0x0,0x0,0x0,0x2,0x1,0x0,0x2,0x0,0x0,0x0,0x0,0x9,0x9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0xc0,0x0,0x2,0x0,0x0,0x0,0x0,0x9,0x0,0x2,0x2,0x0,0x1ffc00,0x200000,0x400000,0x800000,0xf0000c0,0xf0000c0,0x10000000,0x20000000,0xc0000000,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x2,0x0,0x300,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x1f0f3,0x1f0f3,0x0,0x0,0xf3,0x0,0x0,0xf3,0x0,0x0,0x0,0x0,0xf3,0x0,0x0,0xf3,0x0,0x0,0x0,0x0,0xf3,0x0,0xf3,0xf3,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0xf3,0x0,0x0,0xf3,0xf3,0xf3,0x0,0x0,0x0,0x0,0x0,0xf3,0x0,0x0,0x0,0xf3,0x0,0x0,0x0,0xf3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0xc,0xc,0x0,0xf3,0xf3,0x0,0x730,0x400,0x730,0x0,0x0,0xf3,0x0,0x0,0x0,0x1f000,0x0,0xf3,0x0,0x0,0x0,0x0,0x60000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[16];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 89; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 89; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 89; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 89; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 89; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 89; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[147];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 89; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 147; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 16; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
