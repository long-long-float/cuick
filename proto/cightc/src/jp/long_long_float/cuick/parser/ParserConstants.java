/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package jp.long_long_float.cuick.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SPACES = 1;
  /** RegularExpression Id. */
  int BLOCK_COMMENT = 4;
  /** RegularExpression Id. */
  int LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int ASM = 6;
  /** RegularExpression Id. */
  int AUTO = 7;
  /** RegularExpression Id. */
  int BOOL = 8;
  /** RegularExpression Id. */
  int BREAK = 9;
  /** RegularExpression Id. */
  int CASE = 10;
  /** RegularExpression Id. */
  int CATCH = 11;
  /** RegularExpression Id. */
  int CHAR = 12;
  /** RegularExpression Id. */
  int CLASS = 13;
  /** RegularExpression Id. */
  int CONST = 14;
  /** RegularExpression Id. */
  int CONST_CAST = 15;
  /** RegularExpression Id. */
  int CONTINUE = 16;
  /** RegularExpression Id. */
  int DEFAULT_ = 17;
  /** RegularExpression Id. */
  int DELETE = 18;
  /** RegularExpression Id. */
  int DO = 19;
  /** RegularExpression Id. */
  int DOUBLE = 20;
  /** RegularExpression Id. */
  int DYNAMIC_CAST = 21;
  /** RegularExpression Id. */
  int ELSE = 22;
  /** RegularExpression Id. */
  int ENUM = 23;
  /** RegularExpression Id. */
  int EXPLICIT = 24;
  /** RegularExpression Id. */
  int EXPORT = 25;
  /** RegularExpression Id. */
  int EXTERN = 26;
  /** RegularExpression Id. */
  int FLOAT = 27;
  /** RegularExpression Id. */
  int FOR = 28;
  /** RegularExpression Id. */
  int FRIEND = 29;
  /** RegularExpression Id. */
  int GOTO = 30;
  /** RegularExpression Id. */
  int IF = 31;
  /** RegularExpression Id. */
  int INLINE = 32;
  /** RegularExpression Id. */
  int INT = 33;
  /** RegularExpression Id. */
  int LAST = 34;
  /** RegularExpression Id. */
  int LONG = 35;
  /** RegularExpression Id. */
  int MUTABLE = 36;
  /** RegularExpression Id. */
  int NAMESPACE = 37;
  /** RegularExpression Id. */
  int NEW = 38;
  /** RegularExpression Id. */
  int OPERATOR = 39;
  /** RegularExpression Id. */
  int PRIVATE = 40;
  /** RegularExpression Id. */
  int PROTECTED = 41;
  /** RegularExpression Id. */
  int PUBLIC = 42;
  /** RegularExpression Id. */
  int REGISTER = 43;
  /** RegularExpression Id. */
  int REINTERPRET_CAST = 44;
  /** RegularExpression Id. */
  int RETURN = 45;
  /** RegularExpression Id. */
  int SHORT = 46;
  /** RegularExpression Id. */
  int SIGNED = 47;
  /** RegularExpression Id. */
  int SIZEOF = 48;
  /** RegularExpression Id. */
  int STATIC = 49;
  /** RegularExpression Id. */
  int STATIC_CAST = 50;
  /** RegularExpression Id. */
  int STRUCT = 51;
  /** RegularExpression Id. */
  int SWITCH = 52;
  /** RegularExpression Id. */
  int TEMPLATE = 53;
  /** RegularExpression Id. */
  int THROW = 54;
  /** RegularExpression Id. */
  int TRY = 55;
  /** RegularExpression Id. */
  int TYPEDEF = 56;
  /** RegularExpression Id. */
  int TYPEID = 57;
  /** RegularExpression Id. */
  int TYPENAME = 58;
  /** RegularExpression Id. */
  int UNION = 59;
  /** RegularExpression Id. */
  int UNSIGNED = 60;
  /** RegularExpression Id. */
  int USING = 61;
  /** RegularExpression Id. */
  int VIRTUAL = 62;
  /** RegularExpression Id. */
  int VOID = 63;
  /** RegularExpression Id. */
  int VOLATILE = 64;
  /** RegularExpression Id. */
  int WCHAR_T = 65;
  /** RegularExpression Id. */
  int WHILE = 66;
  /** RegularExpression Id. */
  int DOLLAR = 67;
  /** RegularExpression Id. */
  int EXTEND = 68;
  /** RegularExpression Id. */
  int AS = 69;
  /** RegularExpression Id. */
  int IDENTIFIER = 70;
  /** RegularExpression Id. */
  int INTEGER = 71;
  /** RegularExpression Id. */
  int CHARACTER = 76;
  /** RegularExpression Id. */
  int STRING = 81;
  /** RegularExpression Id. */
  int BUILT_IN_CODE = 85;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_BLOCK_COMMENT = 1;
  /** Lexical state. */
  int IN_CHARACTER = 2;
  /** Lexical state. */
  int CHARACTER_TERM = 3;
  /** Lexical state. */
  int IN_STRING = 4;
  /** Lexical state. */
  int IN_BUILT_IN_CODE = 5;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<SPACES>",
    "\"/*\"",
    "<token of kind 3>",
    "\"*/\"",
    "<LINE_COMMENT>",
    "\"asm\"",
    "\"auto\"",
    "\"bool\"",
    "\"break\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"const_cast\"",
    "\"continue\"",
    "\"default\"",
    "\"delete\"",
    "\"do\"",
    "\"double\"",
    "\"dynamic_cast\"",
    "\"else\"",
    "\"enum\"",
    "\"explicit\"",
    "\"export\"",
    "\"extern\"",
    "\"float\"",
    "\"for\"",
    "\"friend\"",
    "\"goto\"",
    "\"if\"",
    "\"inline\"",
    "\"int\"",
    "\"last\"",
    "\"long\"",
    "\"mutable\"",
    "\"namespace\"",
    "\"new\"",
    "\"operator\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"register\"",
    "\"reinterpret_cast\"",
    "\"return\"",
    "\"short\"",
    "\"signed\"",
    "\"sizeof\"",
    "\"static\"",
    "\"static_cast\"",
    "\"struct\"",
    "\"switch\"",
    "\"template\"",
    "\"throw\"",
    "\"try\"",
    "\"typedef\"",
    "\"typeid\"",
    "\"typename\"",
    "\"union\"",
    "\"unsigned\"",
    "\"using\"",
    "\"virtual\"",
    "\"void\"",
    "\"volatile\"",
    "\"wchar_t\"",
    "\"while\"",
    "\"$\"",
    "\"extend\"",
    "\"as\"",
    "<IDENTIFIER>",
    "<INTEGER>",
    "\"\\\'\"",
    "<token of kind 73>",
    "<token of kind 74>",
    "<token of kind 75>",
    "\"\\\'\"",
    "\"\\\"\"",
    "<token of kind 78>",
    "<token of kind 79>",
    "<token of kind 80>",
    "\"\\\"\"",
    "\"`\"",
    "<token of kind 83>",
    "\"\\\\`\"",
    "\"`\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"&\"",
    "\"*\"",
    "\",\"",
    "\";\"",
    "\"[\"",
    "\"]\"",
    "\"=\"",
    "\"}\"",
    "\".\"",
    "\"::\"",
    "\"-\"",
    "\":\"",
    "\">\"",
    "\"<\"",
    "\"...\"",
    "\"..\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"**=\"",
    "\"?\"",
    "\"||\"",
    "\"&&\"",
    "\">=\"",
    "\"<=\"",
    "\"==\"",
    "\"!=\"",
    "\"|\"",
    "\"^\"",
    "\">>\"",
    "\"<<\"",
    "\"+\"",
    "\"**\"",
    "\"/\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"!\"",
    "\"~\"",
    "\"->\"",
    "\"@input\"",
    "\"@debug\"",
    "\"@memo\"",
    "\"@while\"",
    "\"@test\"",
    "\"in:\"",
    "\"out:\"",
  };

}
