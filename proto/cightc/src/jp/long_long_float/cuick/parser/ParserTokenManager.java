/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package jp.long_long_float.cuick.parser;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import jp.long_long_float.cuick.ast.AST;
import jp.long_long_float.cuick.ast.ArefNode;
import jp.long_long_float.cuick.ast.AssignNode;
import jp.long_long_float.cuick.ast.AtCommandNode;
import jp.long_long_float.cuick.ast.AtDebugNode;
import jp.long_long_float.cuick.ast.AtInputAbstractVariableNode;
import jp.long_long_float.cuick.ast.AtInputArrayVariableNode;
import jp.long_long_float.cuick.ast.AtInputNode;
import jp.long_long_float.cuick.ast.AtInputVariableNode;
import jp.long_long_float.cuick.ast.AtMemoNode;
import jp.long_long_float.cuick.ast.AtTestCase;
import jp.long_long_float.cuick.ast.AtTestNode;
import jp.long_long_float.cuick.ast.AtWhileNode;
import jp.long_long_float.cuick.ast.BinaryOpNode;
import jp.long_long_float.cuick.ast.BlockNode;
import jp.long_long_float.cuick.ast.BreakNode;
import jp.long_long_float.cuick.ast.BuiltInCode;
import jp.long_long_float.cuick.ast.CaseNode;
import jp.long_long_float.cuick.ast.CastNode;
import jp.long_long_float.cuick.ast.CondExprNode;
import jp.long_long_float.cuick.ast.ContinueNode;
import jp.long_long_float.cuick.ast.Declarations;
import jp.long_long_float.cuick.ast.DoWhileNode;
import jp.long_long_float.cuick.ast.ExprNode;
import jp.long_long_float.cuick.ast.ExprStmtNode;
import jp.long_long_float.cuick.ast.ForEachNode;
import jp.long_long_float.cuick.ast.ForNode;
import jp.long_long_float.cuick.ast.FuncallNode;
import jp.long_long_float.cuick.ast.IfNode;
import jp.long_long_float.cuick.ast.LiteralNode;
import jp.long_long_float.cuick.ast.Location;
import jp.long_long_float.cuick.ast.MemberNode;
import jp.long_long_float.cuick.ast.MultiplexAssignNode;
import jp.long_long_float.cuick.ast.OpAssignNode;
import jp.long_long_float.cuick.ast.PrefixOpNode;
import jp.long_long_float.cuick.ast.PtrMemberNode;
import jp.long_long_float.cuick.ast.RangeNode;
import jp.long_long_float.cuick.ast.ReturnNode;
import jp.long_long_float.cuick.ast.SizeofExprNode;
import jp.long_long_float.cuick.ast.SizeofTypeNode;
import jp.long_long_float.cuick.ast.StaticMemberNode;
import jp.long_long_float.cuick.ast.StmtNode;
import jp.long_long_float.cuick.ast.SuffixOpNode;
import jp.long_long_float.cuick.ast.SwitchNode;
import jp.long_long_float.cuick.ast.TypeNode;
import jp.long_long_float.cuick.ast.TypedefNode;
import jp.long_long_float.cuick.ast.UnaryOpNode;
import jp.long_long_float.cuick.ast.VariableNode;
import jp.long_long_float.cuick.ast.WhileNode;
import jp.long_long_float.cuick.entity.Function;
import jp.long_long_float.cuick.entity.Parameter;
import jp.long_long_float.cuick.entity.Params;
import jp.long_long_float.cuick.entity.Variable;
import jp.long_long_float.cuick.exception.FileException;
import jp.long_long_float.cuick.exception.SyntaxException;
import jp.long_long_float.cuick.foreach.Enumerable;
import jp.long_long_float.cuick.foreach.PointerEnumerable;
import jp.long_long_float.cuick.foreach.RangeEnumerable;
import jp.long_long_float.cuick.foreach.VariableSetEnumerable;
import jp.long_long_float.cuick.type.BasicType;
import jp.long_long_float.cuick.type.FunctionTemplateType;
import jp.long_long_float.cuick.type.FunctionType;
import jp.long_long_float.cuick.type.NamedType;
import jp.long_long_float.cuick.type.PointerType;
import jp.long_long_float.cuick.type.ReferenceType;
import jp.long_long_float.cuick.type.TemplateType;
import jp.long_long_float.cuick.type.Type;
import jp.long_long_float.cuick.utility.ErrorHandler;
import jp.long_long_float.cuick.utility.Pair;
import jp.long_long_float.cuick.utility.TextUtils;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x10L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffffffffffffc0L) != 0L || (active1 & 0x5fL) != 0L || (active2 & 0x6000L) != 0L)
         {
            jjmatchedKind = 71;
            return 8;
         }
         if ((active0 & 0x4L) != 0L || (active1 & 0x8000080000000000L) != 0L)
            return 1;
         return -1;
      case 1:
         if ((active0 & 0x100180000L) != 0L)
            return 8;
         if ((active0 & 0xfffffffeffe7ffc0L) != 0L || (active1 & 0x5fL) != 0L || (active2 & 0x6000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return 8;
         }
         return -1;
      case 2:
         if ((active0 & 0x200008420000040L) != 0L)
            return 8;
         if ((active0 & 0xfdffff7adff7ff80L) != 0L || (active1 & 0x5fL) != 0L || (active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
            return 8;
         }
         return -1;
      case 3:
         if ((active0 & 0x100001880c01580L) != 0L || (active1 & 0x2L) != 0L)
            return 8;
         if ((active0 & 0xfcffff625f37ea00L) != 0L || (active1 & 0x5dL) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 3;
            return 8;
         }
         return -1;
      case 4:
         if ((active0 & 0xa08080001800ea00L) != 0L || (active1 & 0x10L) != 0L)
            return 8;
         if ((active0 & 0x5c7f7f6247370000L) != 0L || (active1 & 0x4dL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 4;
            }
            return 8;
         }
         return -1;
      case 5:
         if ((active0 & 0x83f480246140000L) != 0L || (active1 & 0x40L) != 0L)
            return 8;
         if ((active0 & 0x5440376001238000L) != 0L || (active1 & 0xdL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 5;
            }
            return 8;
         }
         return -1;
      case 6:
         if ((active0 & 0x400022000020000L) != 0L || (active1 & 0x9L) != 0L)
            return 8;
         if ((active0 & 0x5048354001218000L) != 0L || (active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 6;
            return 8;
         }
         return -1;
      case 7:
         if ((active0 & 0x5040110001010000L) != 0L || (active1 & 0x4L) != 0L)
            return 8;
         if ((active0 & 0x8244000208000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 7;
            return 8;
         }
         return -1;
      case 8:
         if ((active0 & 0x8200000208000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 8;
            return 8;
         }
         if ((active0 & 0x44000000000L) != 0L)
            return 8;
         return -1;
      case 9:
         if ((active0 & 0x8200000200000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 9;
            return 8;
         }
         if ((active0 & 0x8000L) != 0L)
            return 8;
         return -1;
      case 10:
         if ((active0 & 0x200000200000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 10;
            return 8;
         }
         if ((active0 & 0x8000000000000L) != 0L)
            return 8;
         return -1;
      case 11:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 11;
            return 8;
         }
         if ((active0 & 0x200000L) != 0L)
            return 8;
         return -1;
      case 12:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 12;
            return 8;
         }
         return -1;
      case 13:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 13;
            return 8;
         }
         return -1;
      case 14:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 14;
            return 8;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 131;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L, 0x0L);
      case 34:
         return jjStopAtPos(0, 78);
      case 36:
         return jjStopAtPos(0, 69);
      case 37:
         jjmatchedKind = 128;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L, 0x0L);
      case 38:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20200000000000L, 0x0L);
      case 39:
         return jjStopAtPos(0, 73);
      case 40:
         return jjStopAtPos(0, 87);
      case 41:
         return jjStopAtPos(0, 88);
      case 42:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4040000000000L, 0x0L);
      case 43:
         jjmatchedKind = 126;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L, 0x2L);
      case 44:
         return jjStopAtPos(0, 95);
      case 45:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L, 0x44L);
      case 46:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L, 0x80L);
      case 47:
         jjmatchedKind = 127;
         return jjMoveStringLiteralDfa1_0(0x4L, 0x80000000000L, 0x0L);
      case 58:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20L);
      case 59:
         return jjStopAtPos(0, 97);
      case 60:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2081000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1042000000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 115);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1f00L);
      case 91:
         return jjStopAtPos(0, 92);
      case 93:
         return jjStopAtPos(0, 93);
      case 94:
         jjmatchedKind = 123;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L, 0x0L);
      case 96:
         return jjStopAtPos(0, 83);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xc0L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x300L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1fc00L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3e0000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x7c00000L, 0x40L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x78000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x700000000L, 0x0L, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1800000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xc000000000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L, 0x4000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xe0000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x700000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x3f800000000000L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1fc0000000000000L, 0x0L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0xe000000000000000L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18L, 0x0L);
      case 123:
         return jjStopAtPos(0, 89);
      case 124:
         jjmatchedKind = 122;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10400000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 96);
      case 126:
         return jjStopAtPos(0, 132);
      default :
         return jjMoveNfa_0(6, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 117);
         break;
      case 42:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 43:
         if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(1, 129);
         break;
      case 45:
         if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(1, 130);
         break;
      case 46:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 58:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(1, 133);
         break;
      case 60:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 61:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      case 62:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(1, 134);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4808000c00L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x40708000060000L, active1, 0L, active2, 0L);
      case 102:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 32, 8);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x80800000001000L, active1, 0x10L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000000L, active1, 0x1L, active2, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10402000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000600800000L, active1, 0L, active2, 0x2000L);
      case 111:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10a011c100L, active1, 0x6L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x300060040000200L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000040L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c000000000000L, active1, 0L, active2, 0x1000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x82000000080L, active1, 0L, active2, 0x4000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L, active2, 0x800L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x7000000L, active1, 0x40L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c00000000200000L, active1, 0L, active2, 0L);
      case 124:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 116);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(2, 103);
         break;
      case 58:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(2, 141);
         break;
      case 61:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(2, 112);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(2, 113);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(2, 114);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000003000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000200L, active1, 0L, active2, 0x1600L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x1100000000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L, active2, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xa020220040000000L, active1, 0x12L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x208040000L, active1, 0x4L, active2, 0L);
      case 109:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 8);
         return jjMoveStringLiteralDfa3_0(active0, 0x40004000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100021c000L, active1, 0L, active2, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x840010000100L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1c00000003000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 8);
         return jjMoveStringLiteralDfa3_0(active0, 0x90000000000000L, active1, 0x1L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000800400400L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 8);
         return jjMoveStringLiteralDfa3_0(active0, 0x402084000880L, active1, 0x40L, active2, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000900000L, active1, 0L, active2, 0L);
      case 119:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 8);
         break;
      case 121:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 8);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 58:
         if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(3, 142);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2010220200L, active1, 0xcL, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L, active2, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L, active1, 0L, active2, 0L);
      case 100:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 8);
         break;
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 8);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 8);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x1c02004044040000L, active1, 0x40L, active2, 0L);
      case 103:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 8);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000100200000000L, active1, 0L, active2, 0x800L);
      case 108:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x80001000000L, active1, 0x10L, active2, 0L);
      case 109:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x8001200000000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 8);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x2080000002000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0L, active2, 0x100L);
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x810000000000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800e000L, active1, 0L, active2, 0x1000L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x2c040000010000L, active1, 0x1L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10400000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x30000000000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x30000000000000L, active1, 0L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 8);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0x1040000000000L, active1, 0L, active2, 0L);
      case 103:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 104:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 8);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x80c080001010000L, active1, 0L, active2, 0L);
      case 107:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 8);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000100000L, active1, 0L, active2, 0x800L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000240000000L, active1, 0x40L, active2, 0L);
      case 111:
         if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(4, 138);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x400006000000L, active1, 0x8L, active2, 0L);
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0x104000000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 8);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 8);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(4, 140);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000048000L, active1, 0x4L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L, active1, 0x1L, active2, 0x300L);
      case 119:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L, active1, 0x8L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1040000000000000L, active1, 0x1L, active2, 0L);
      case 99:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 8);
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8040001000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 8);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 8);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 8);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 8);
         break;
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 8);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 8);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 8);
         else if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(5, 139);
         return jjMoveStringLiteralDfa6_0(active0, 0x400200000000000L, active1, 0L, active2, 0L);
      case 102:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 8);
         break;
      case 103:
         if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(5, 137);
         break;
      case 104:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 8);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L, active1, 0x4L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000020000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 8);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000010000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 8);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 8);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(5, 136);
         return jjMoveStringLiteralDfa6_0(active0, 0x130000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x208000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 8);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 8);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000100000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 8);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0L);
      case 108:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 8);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 8);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 8);
         return jjMoveStringLiteralDfa7_0(active0, 0x40040000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x8004000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 8);
         break;
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 8);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 54, 8);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 8);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 66, 8);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 40, 8);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 8);
         break;
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      case 100:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 8);
         break;
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 8);
         break;
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 15, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L);
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 51, 8);
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(11, 21, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 45, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 22;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 72)
                        kind = 72;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 72)
                        kind = 72;
                     jjCheckNAddStates(3, 7);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(8, 10);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(8, 10);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 9:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddStates(0, 2);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddStates(0, 2);
                  break;
               case 13:
                  if (curChar != 48)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddStates(3, 7);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddStates(11, 13);
                  break;
               case 17:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddStates(14, 16);
                  break;
               case 20:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddStates(17, 19);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 8:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(8);
                  break;
               case 2:
                  if (kind > 5)
                     kind = 5;
                  jjAddStates(8, 10);
                  break;
               case 11:
               case 16:
               case 18:
               case 21:
                  if (curChar != 85)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAdd(12);
                  break;
               case 12:
                  if (curChar == 76 && kind > 72)
                     kind = 72;
                  break;
               case 14:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddStates(11, 13);
                  break;
               case 19:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjAddStates(8, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 22 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 77);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 82);
      default :
         return jjMoveNfa_4(1, 0);
   }
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0xfffffffbffffdbffL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0xff000000000000L & l) != 0L && kind > 80)
                     kind = 80;
                  break;
               case 5:
                  if (kind > 81)
                     kind = 81;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 79)
                        kind = 79;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 92)
                     jjAddStates(20, 21);
                  break;
               case 0:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(0);
                  break;
               case 5:
                  if (kind > 81)
                     kind = 81;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(0);
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 81)
                     kind = 81;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffff7fffffdbffL & l) != 0L && kind > 74)
                     kind = 74;
                  break;
               case 2:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0xff000000000000L & l) != 0L && kind > 75)
                     kind = 75;
                  break;
               case 5:
                  if (kind > 76)
                     kind = 76;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 74)
                        kind = 74;
                  }
                  else if (curChar == 92)
                     jjAddStates(20, 21);
                  break;
               case 1:
                  if (curChar == 92)
                     jjAddStates(20, 21);
                  break;
               case 5:
                  if (kind > 76)
                     kind = 76;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 74)
                     kind = 74;
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 76)
                     kind = 76;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 84;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 92:
         return jjMoveStringLiteralDfa1_5(0x200000L);
      case 96:
         return jjStopAtPos(0, 86);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_5(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 96:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         break;
      default :
         break;
   }
   return jjStartNfa_5(0, 0L, active1);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 84;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     kind = 84;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 84)
                     kind = 84;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   10, 11, 12, 14, 17, 18, 12, 19, 2, 3, 5, 15, 16, 12, 17, 18, 
   12, 20, 21, 12, 2, 5, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\141\163\155", "\141\165\164\157", 
"\142\157\157\154", "\142\162\145\141\153", "\143\141\163\145", "\143\141\164\143\150", 
"\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\163\164\137\143\141\163\164", "\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", 
"\144\145\154\145\164\145", "\144\157", "\144\157\165\142\154\145", 
"\144\171\156\141\155\151\143\137\143\141\163\164", "\145\154\163\145", "\145\156\165\155", "\145\170\160\154\151\143\151\164", 
"\145\170\160\157\162\164", "\145\170\164\145\162\156", "\146\141\154\163\145", "\146\154\157\141\164", 
"\146\157\162", "\146\162\151\145\156\144", "\147\157\164\157", "\151\146", 
"\151\156\154\151\156\145", "\151\156\164", "\154\141\163\164", "\154\157\156\147", 
"\155\165\164\141\142\154\145", "\156\141\155\145\163\160\141\143\145", "\156\145\167", 
"\157\160\145\162\141\164\157\162", "\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", 
"\160\165\142\154\151\143", "\162\145\147\151\163\164\145\162", 
"\162\145\151\156\164\145\162\160\162\145\164\137\143\141\163\164", "\162\145\164\165\162\156", "\163\150\157\162\164", 
"\163\151\147\156\145\144", "\163\151\172\145\157\146", "\163\164\141\164\151\143", 
"\163\164\141\164\151\143\137\143\141\163\164", "\163\164\162\165\143\164", "\163\167\151\164\143\150", 
"\164\145\155\160\154\141\164\145", "\164\150\162\157\167", "\164\162\165\145", "\164\162\171", 
"\164\171\160\145\144\145\146", "\164\171\160\145\151\144", "\164\171\160\145\156\141\155\145", 
"\165\156\151\157\156", "\165\156\163\151\147\156\145\144", "\165\163\151\156\147", 
"\166\151\162\164\165\141\154", "\166\157\151\144", "\166\157\154\141\164\151\154\145", 
"\167\143\150\141\162\137\164", "\167\150\151\154\145", "\44", "\145\170\164\145\156\144", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, "\50", 
"\51", "\173", "\46", "\52", "\133", "\135", "\75", "\54", "\175", "\73", "\56", 
"\55", "\72", "\76", "\74", "\56\56\56", "\53\75", "\55\75", "\52\75", "\57\75", 
"\45\75", "\46\75", "\174\75", "\136\75", "\74\74\75", "\76\76\75", "\52\52\75", "\77", 
"\174\174", "\46\46", "\76\75", "\74\75", "\75\75", "\41\75", "\174", "\136", "\76\76", 
"\74\74", "\53", "\57", "\45", "\53\53", "\55\55", "\41", "\176", "\72\72", "\55\76", 
"\56\56", "\100\151\156\160\165\164", "\100\144\145\142\165\147", 
"\100\155\145\155\157", "\100\167\150\151\154\145", "\100\164\145\163\164", "\151\156\72", 
"\157\165\164\72", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_BLOCK_COMMENT",
   "IN_CHARACTER",
   "CHARACTER_TERM",
   "IN_STRING",
   "IN_BUILT_IN_CODE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, 1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 
   3, 3, 0, 4, -1, -1, -1, 0, 5, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0xffffffffffc421ffL, 0x7fffL, 
};
static final long[] jjtoSkip = {
   0x32L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x32L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0xcL, 0x3bde00L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[22];
private final int[] jjstateSet = new int[44];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 22; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 3)
         {
            jjmatchedKind = 3;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
